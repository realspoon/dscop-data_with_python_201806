# -*- mode: ruby -*-
# vi: set ft=ruby :


# cf link : https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/
servers = [
    {
        :name => "k8s-head",
        :type => "master",
        :box => "centos/7",
        :box_version => "1905.1",
        :eth1 => "192.168.205.10",
        :mem => "2048",
        :cpu => "2"
    },
    {
        :name => "k8s-node-1",
        :type => "node",
        :box => "centos/7",
        :box_version => "1905.1",
        :eth1 => "192.168.205.11",
        :mem => "2048",
        :cpu => "2"
    },
    {
        :name => "k8s-node-2",
        :type => "node",
        :box => "centos/7",
        :box_version => "1905.1",
        :eth1 => "192.168.205.12",
        :mem => "2048",
        :cpu => "2"
    }
]

# This script to install k8s using kubeadm will get executed after a box is provisioned
$configureBox = <<-SCRIPT
    # update yum
    yum update -y

    # install docker 
    yum install -y yum-utils device-mapper-persistent-data lvm2 net-tools
    yum-config-manager   --add-repo  https://download.docker.com/linux/centos/docker-ce.repo
    yum install docker-ce docker-ce-cli containerd.io -y
    systemctl start docker && systemctl enable docker 

    # run docker commands as vagrant user
    usermod -aG docker vagrant

    # Off selinux
    setenforce 0
    sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

    # Stop firewalld
    systemctl stop firewalld && systemctl disable firewalld

    # Make a repo to install kubernetes
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

    # Install kubernetes (kubelet, kubeadm, kubectl)
    yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes    

    # enable kubelet & start service
    systemctl enable kubelet && systemctl start kubelet

    cat <<EOF >  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables=1
net.bridge.bridge-nf-call-iptables=1
EOF

    sysctl --system

    # swap disabled.
    swapoff -a && sed -i '/swap/s/^/#/' /etc/fstab

SCRIPT

$configureMaster = <<-SCRIPT
    echo "This is master"
    # ip of this box
    IP_ADDR=`ifconfig eth1 | grep mask | awk '{print $2}' | cut -f2 -d:`
    echo $IP_ADDR
    
    # HOSTNAME
    HOST_NAME=$(hostname -s)
    echo $HOST_NAME
SCRIPT

$configureNode = <<-SCRIPT
echo "This is worker"
SCRIPT

Vagrant.configure("2") do |config|

    servers.each do |opts|
        config.vm.define opts[:name] do |config|

            config.vm.box = opts[:box]
            config.vm.box_version = opts[:box_version]
            config.vm.hostname = opts[:name]
            config.vm.network :private_network, ip: opts[:eth1]

            config.vm.provider "virtualbox" do |v|

                v.name = opts[:name]
            	 v.customize ["modifyvm", :id, "--groups", "/DSCoP"]
                v.customize ["modifyvm", :id, "--memory", opts[:mem]]
                v.customize ["modifyvm", :id, "--cpus", opts[:cpu]]
            end

            config.vm.provision "shell", inline: $configureBox

            if opts[:type] == "master"
                config.vm.provision "shell", inline: $configurxeMaster
            else
                config.vm.provision "shell", inline: $configureNode
            end

        end

    end

end 
